/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/sessions/": {
    /** Get Sessions By Profile */
    get: operations["get_sessions_by_profile_sessions__get"];
    /** Insert Session */
    post: operations["insert_session_sessions__post"];
  };
  "/sessions/{session_id}": {
    /** Get Session By Id */
    get: operations["get_session_by_id_sessions__session_id__get"];
    /** Delete Session */
    delete: operations["delete_session_sessions__session_id__delete"];
    /** Update Session */
    patch: operations["update_session_sessions__session_id__patch"];
  };
  "/sessions/run": {
    /** Run Crew */
    post: operations["run_crew_sessions_run_post"];
  };
  "/messages/": {
    /** Get Messages By Session */
    get: operations["get_messages_by_session_messages__get"];
    /** Insert Message */
    post: operations["insert_message_messages__post"];
  };
  "/messages/{message_id}": {
    /** Get Message By Id */
    get: operations["get_message_by_id_messages__message_id__get"];
    /** Delete Message */
    delete: operations["delete_message_messages__message_id__delete"];
    /** Update Message */
    patch: operations["update_message_messages__message_id__patch"];
  };
  "/crews/": {
    /** Get Crews Of User */
    get: operations["get_crews_of_user_crews__get"];
    /** Insert Crew */
    post: operations["insert_crew_crews__post"];
  };
  "/crews/published": {
    /** Get Published Crews */
    get: operations["get_published_crews_crews_published_get"];
  };
  "/crews/{crew_id}": {
    /** Get Crew By Id */
    get: operations["get_crew_by_id_crews__crew_id__get"];
    /** Delete Crew */
    delete: operations["delete_crew_crews__crew_id__delete"];
    /** Update Crew */
    patch: operations["update_crew_crews__crew_id__patch"];
  };
  "/agents/published": {
    /** Get Published Agents */
    get: operations["get_published_agents_agents_published_get"];
  };
  "/agents/by_profile": {
    /** Get Users Agents */
    get: operations["get_users_agents_agents_by_profile_get"];
  };
  "/agents/by_crew": {
    /** Get Agents From Crew */
    get: operations["get_agents_from_crew_agents_by_crew_get"];
  };
  "/agents/{agent_id}": {
    /** Get Agent By Id */
    get: operations["get_agent_by_id_agents__agent_id__get"];
    /** Delete Agent */
    delete: operations["delete_agent_agents__agent_id__delete"];
    /** Patch Agent */
    patch: operations["patch_agent_agents__agent_id__patch"];
  };
  "/agents/": {
    /** Insert Agent */
    post: operations["insert_agent_agents__post"];
  };
  "/profiles/": {
    /** Get Profiles */
    get: operations["get_profiles_profiles__get"];
    /** Insert Profile */
    post: operations["insert_profile_profiles__post"];
  };
  "/profiles/{profile_id}": {
    /** Get Profile By Id */
    get: operations["get_profile_by_id_profiles__profile_id__get"];
    /** Update Profile */
    patch: operations["update_profile_profiles__profile_id__patch"];
  };
  "/profiles/{profile_id}/api_keys": {
    /**
     * Get Api Keys
     * @description Returns api keys with the api key type as an object with the id, name, description etc.
     */
    get: operations["get_api_keys_profiles__profile_id__api_keys_get"];
  };
  "/profiles/api_keys": {
    /** Insert Api Key */
    post: operations["insert_api_key_profiles_api_keys_post"];
  };
  "/profiles/api_keys/{api_key_id}": {
    /** Delete Api Key */
    delete: operations["delete_api_key_profiles_api_keys__api_key_id__delete"];
    /** Update Api Key */
    patch: operations["update_api_key_profiles_api_keys__api_key_id__patch"];
  };
  "/auth/sign_up": {
    /**
     * Email Sign Up
     * @description format for passing display name: 'options': {'data':{'display_name': 'name'}}
     */
    post: operations["email_sign_up_auth_sign_up_post"];
  };
  "/auth/sign_in": {
    /** Email Sign In */
    post: operations["email_sign_in_auth_sign_in_post"];
  };
  "/auth/sign_in/provider": {
    /** Provider Sign In */
    post: operations["provider_sign_in_auth_sign_in_provider_post"];
  };
  "/api_key_types/": {
    /** Get All Api Key Types */
    get: operations["get_all_api_key_types_api_key_types__get"];
  };
  "/rest/": {
    /** Get Leads */
    get: operations["get_leads_rest__get"];
    /** Publish Comment */
    post: operations["publish_comment_rest__post"];
  };
  "/": {
    /** Redirect To Docs */
    get: operations["redirect_to_docs__get"];
  };
  "/compile": {
    /** Compile */
    get: operations["compile_compile_get"];
  };
  "/improve": {
    /** Improve */
    get: operations["improve_improve_get"];
  };
  "/auto-build": {
    /** Auto Build Crew */
    get: operations["auto_build_crew_auto_build_get"];
  };
  "/me": {
    /** Get Profile From Header */
    get: operations["get_profile_from_header_me_get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** APIKey */
    APIKey: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Profile Id
       * Format: uuid
       */
      profile_id: string;
      api_key_type?: components["schemas"]["APIKeyType"] | null;
      /** Api Key */
      api_key: string;
    };
    /** APIKeyRequestModel */
    APIKeyRequestModel: {
      /**
       * Profile Id
       * Format: uuid
       */
      profile_id: string;
      /**
       * Api Key Type Id
       * Format: uuid
       */
      api_key_type_id: string;
      /** Api Key */
      api_key: string;
    };
    /** APIKeyType */
    APIKeyType: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /** Name */
      name?: string | null;
      /** Description */
      description?: string | null;
    };
    /** APIKeyUpdateModel */
    APIKeyUpdateModel: {
      /** Api Key */
      api_key: string;
    };
    /** Agent */
    Agent: {
      /** Title */
      title: string;
      /** Role */
      role: string;
      /** System Message */
      system_message: string;
      /** Tools */
      tools: Record<string, never>[];
      /**
       * Model
       * @enum {string}
       */
      model: "gpt-3.5-turbo" | "gpt-4-turbo-preview";
      /** Description */
      description?: string | null;
      /**
       * Profile Id
       * Format: uuid
       */
      profile_id: string;
      /** Version */
      version?: string | null;
      /** Avatar */
      avatar: string;
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /** Published */
      published: boolean;
    };
    /** AgentRequestModel */
    AgentRequestModel: {
      /** Title */
      title: string;
      /** Role */
      role: string;
      /** System Message */
      system_message: string;
      /** Tools */
      tools: Record<string, never>[];
      /**
       * Model
       * @enum {string}
       */
      model: "gpt-3.5-turbo" | "gpt-4-turbo-preview";
      /** Description */
      description?: string | null;
      /**
       * Profile Id
       * Format: uuid
       */
      profile_id: string;
      /** Version */
      version?: string | null;
      /** Avatar */
      avatar: string;
    };
    /** AgentUpdateModel */
    AgentUpdateModel: {
      /** Title */
      title?: string | null;
      /** Role */
      role?: string | null;
      /** System Message */
      system_message?: string | null;
      /** Tools */
      tools?: Record<string, never>[] | null;
      /** Model */
      model?: ("gpt-3.5-turbo" | "gpt-4-turbo-preview") | null;
      /** Description */
      description?: string | null;
      /** Profile Id */
      profile_id?: string | null;
      /** Version */
      version?: string | null;
      /** Avatar */
      avatar?: string | null;
    };
    /** AuthResponse */
    AuthResponse: {
      user?: components["schemas"]["User"] | null;
      session?: components["schemas"]["gotrue__types__Session"] | null;
    };
    /** Crew */
    Crew: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Profile Id
       * Format: uuid
       */
      profile_id: string;
      /** Edges */
      edges: Record<string, never>[];
      /** Published */
      published: boolean;
      /** Title */
      title: string;
      /** Description */
      description: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
      /** Nodes */
      nodes: string[];
      /** Receiver Id */
      receiver_id?: string | null;
      /** Avatar */
      avatar?: string | null;
      /** Prompt */
      prompt?: Record<string, never> | null;
    };
    /** CrewProcessed */
    CrewProcessed: {
      /**
       * Receiver Id
       * Format: uuid
       */
      receiver_id: string;
      /** Delegator Id */
      delegator_id?: string | null;
      /** Agents */
      agents: components["schemas"]["Agent"][];
      /**
       * Sub Crews
       * @default []
       */
      sub_crews?: components["schemas"]["Crew"][];
    };
    /** CrewRequestModel */
    CrewRequestModel: {
      /**
       * Receiver Id
       * Format: uuid
       */
      receiver_id: string;
      /** Prompt */
      prompt: Record<string, never>;
      /**
       * Profile Id
       * Format: uuid
       */
      profile_id: string;
      /** Edges */
      edges: Record<string, never>[];
      /** Published */
      published: boolean;
      /** Title */
      title: string;
      /** Description */
      description: string;
      /** Nodes */
      nodes: string[];
    };
    /** CrewUpdateModel */
    CrewUpdateModel: {
      /** Receiver Id */
      receiver_id?: string | null;
      /** Prompt */
      prompt?: Record<string, never> | null;
      /** Profile Id */
      profile_id?: string | null;
      /** Edges */
      edges?: Record<string, never>[] | null;
      /** Published */
      published?: boolean | null;
      /** Title */
      title?: string | null;
      /** Description */
      description?: string | null;
      /** Nodes */
      nodes?: string[] | null;
    };
    /**
     * Factor
     * @description A MFA factor.
     */
    Factor: {
      /** Id */
      id: string;
      /** Friendly Name */
      friendly_name?: string | null;
      /** Factor Type */
      factor_type: "totp" | string;
      /**
       * Status
       * @enum {string}
       */
      status: "verified" | "unverified";
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** Message */
    Message: {
      /**
       * Id
       * Format: uuid
       */
      id?: string;
      /**
       * Session Id
       * Format: uuid
       */
      session_id: string;
      /**
       * Profile Id
       * Format: uuid
       */
      profile_id: string;
      /** Sender Id */
      sender_id?: string | null;
      /** Recipient Id */
      recipient_id?: string | null;
      /** Content */
      content: string;
      /**
       * Role
       * @default user
       */
      role?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
    };
    /** MessageRequestModel */
    MessageRequestModel: {
      /**
       * Session Id
       * Format: uuid
       */
      session_id: string;
      /** Content */
      content: string;
      /**
       * Role
       * @default user
       */
      role?: string;
      /** Recipient Id */
      recipient_id?: string | null;
      /** Sender Id */
      sender_id?: string | null;
      /**
       * Profile Id
       * Format: uuid
       */
      profile_id: string;
    };
    /** MessageUpdateModel */
    MessageUpdateModel: {
      /** Session Id */
      session_id?: string | null;
      /** Content */
      content?: string | null;
      /** Role */
      role?: string | null;
      /** Recipient Id */
      recipient_id?: string | null;
      /** Sender Id */
      sender_id?: string | null;
      /** Profile Id */
      profile_id?: string | null;
    };
    /** OAuthResponse */
    OAuthResponse: {
      /**
       * Provider
       * @enum {string}
       */
      provider: "apple" | "azure" | "bitbucket" | "discord" | "facebook" | "figma" | "github" | "gitlab" | "google" | "kakao" | "keycloak" | "linkedin" | "notion" | "slack" | "spotify" | "twitch" | "twitter" | "workos" | "zoom";
      /** Url */
      url: string;
    };
    /** Profile */
    Profile: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Tier Id
       * Format: uuid
       */
      tier_id: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /** Display Name */
      display_name: string;
      /** Stripe Customer Id */
      stripe_customer_id: string | null;
    };
    /** ProfileRequestModel */
    ProfileRequestModel: {
      /**
       * User Id
       * Format: uuid
       */
      user_id: string;
      /**
       * Tier Id
       * Format: uuid
       */
      tier_id: string;
      /** Display Name */
      display_name: string;
      /** Stripe Customer Id */
      stripe_customer_id?: string | null;
    };
    /** ProfileUpdateModel */
    ProfileUpdateModel: {
      /** Tier Id */
      tier_id?: string | null;
      /** Display Name */
      display_name?: string | null;
      /** Stripe Customer Id */
      stripe_customer_id?: string | null;
    };
    /** PublishCommentDataObject */
    PublishCommentDataObject: {
      /** Url */
      url: string;
      /** Body */
      body: string;
      /** Title */
      title: string;
    };
    /** PublishCommentRequest */
    PublishCommentRequest: {
      /**
       * Lead Id
       * Format: uuid
       */
      lead_id: string;
      /** Comment */
      comment: string;
      /** Reddit Username */
      reddit_username: string;
      /** Reddit Password */
      reddit_password: string;
    };
    /** PublishCommentResponse */
    PublishCommentResponse: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Discovered At
       * Format: date-time
       */
      discovered_at: string;
      /** Last Contacted At */
      last_contacted_at?: string | null;
      /** Reddit Id */
      reddit_id?: string | null;
      /** Prospect Username */
      prospect_username: string;
      /** Prospect Name */
      prospect_name?: string | null;
      /** Source */
      source: string;
      data?: components["schemas"]["PublishCommentDataObject"] | null;
      /** Last Event */
      last_event: string;
      /** Status */
      status: string;
      /** Comment */
      comment?: string | null;
    };
    /** RunRequestModel */
    RunRequestModel: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Profile Id
       * Format: uuid
       */
      profile_id: string;
      /**
       * Session Title
       * @default Untitled
       */
      session_title?: string;
      /** Session Id */
      session_id?: string | null;
      /** Reply */
      reply?: string | null;
    };
    /** RunResponse */
    RunResponse: {
      /** Status */
      status: "success" | "failure";
      session: components["schemas"]["src__models__session__Session"];
    };
    /** SessionRequest */
    SessionRequest: {
      /**
       * Crew Id
       * Format: uuid
       */
      crew_id: string;
      /**
       * Profile Id
       * Format: uuid
       */
      profile_id: string;
      /** Title */
      title: string | null;
    };
    /**
     * SessionStatus
     * @enum {string}
     */
    SessionStatus: "running" | "finished" | "idle";
    /** SessionUpdate */
    SessionUpdate: {
      /** Crew Id */
      crew_id?: string | null;
      /** Profile Id */
      profile_id?: string | null;
      /** Title */
      title?: string | null;
      status?: components["schemas"]["SessionStatus"] | null;
    };
    /** SignInWithEmailAndPasswordCredentials */
    SignInWithEmailAndPasswordCredentials: {
      /** Email */
      email: string;
      /** Password */
      password: string;
      options?: components["schemas"]["SignInWithPasswordCredentialsOptions"];
    };
    /** SignInWithOAuthCredentials */
    SignInWithOAuthCredentials: {
      /**
       * Provider
       * @enum {string}
       */
      provider: "apple" | "azure" | "bitbucket" | "discord" | "facebook" | "figma" | "github" | "gitlab" | "google" | "kakao" | "keycloak" | "linkedin" | "notion" | "slack" | "spotify" | "twitch" | "twitter" | "workos" | "zoom";
      options?: components["schemas"]["SignInWithOAuthCredentialsOptions"];
    };
    /** SignInWithOAuthCredentialsOptions */
    SignInWithOAuthCredentialsOptions: {
      /** Redirect To */
      redirect_to?: string;
      /** Scopes */
      scopes?: string;
      /** Query Params */
      query_params?: {
        [key: string]: string;
      };
    };
    /** SignInWithPasswordCredentialsOptions */
    SignInWithPasswordCredentialsOptions: {
      /** Data */
      data?: unknown;
      /** Captcha Token */
      captcha_token?: string;
    };
    /** SignUpWithEmailAndPasswordCredentials */
    SignUpWithEmailAndPasswordCredentials: {
      /** Email */
      email: string;
      /** Password */
      password: string;
      options?: components["schemas"]["SignUpWithEmailAndPasswordCredentialsOptions"];
    };
    /** SignUpWithEmailAndPasswordCredentialsOptions */
    SignUpWithEmailAndPasswordCredentialsOptions: {
      /** Email Redirect To */
      email_redirect_to?: string;
      /** Data */
      data?: unknown;
      /** Captcha Token */
      captcha_token?: string;
    };
    /** User */
    User: {
      /** Id */
      id: string;
      /** App Metadata */
      app_metadata: Record<string, never>;
      /** User Metadata */
      user_metadata: Record<string, never>;
      /** Aud */
      aud: string;
      /** Confirmation Sent At */
      confirmation_sent_at?: string | null;
      /** Recovery Sent At */
      recovery_sent_at?: string | null;
      /** Email Change Sent At */
      email_change_sent_at?: string | null;
      /** New Email */
      new_email?: string | null;
      /** Invited At */
      invited_at?: string | null;
      /** Action Link */
      action_link?: string | null;
      /** Email */
      email?: string | null;
      /** Phone */
      phone?: string | null;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /** Confirmed At */
      confirmed_at?: string | null;
      /** Email Confirmed At */
      email_confirmed_at?: string | null;
      /** Phone Confirmed At */
      phone_confirmed_at?: string | null;
      /** Last Sign In At */
      last_sign_in_at?: string | null;
      /** Role */
      role?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /** Identities */
      identities?: components["schemas"]["UserIdentity"][] | null;
      /** Factors */
      factors?: components["schemas"]["Factor"][] | null;
    };
    /** UserIdentity */
    UserIdentity: {
      /** Id */
      id: string;
      /** User Id */
      user_id: string;
      /** Identity Data */
      identity_data: Record<string, never>;
      /** Provider */
      provider: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /** Last Sign In At */
      last_sign_in_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /** Session */
    gotrue__types__Session: {
      /** Provider Token */
      provider_token?: string | null;
      /** Provider Refresh Token */
      provider_refresh_token?: string | null;
      /** Access Token */
      access_token: string;
      /** Refresh Token */
      refresh_token: string;
      /** Expires In */
      expires_in: number;
      /** Expires At */
      expires_at?: number | null;
      /** Token Type */
      token_type: string;
      user: components["schemas"]["User"];
    };
    /** Session */
    src__models__session__Session: {
      /**
       * Crew Id
       * Format: uuid
       */
      crew_id: string;
      /**
       * Profile Id
       * Format: uuid
       */
      profile_id: string;
      /** Title */
      title: string | null;
      /**
       * Id
       * Format: uuid
       */
      id?: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at?: string;
      /** @default running */
      status?: components["schemas"]["SessionStatus"];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Get Sessions By Profile */
  get_sessions_by_profile_sessions__get: {
    parameters: {
      query: {
        by_profile: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["src__models__session__Session"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Insert Session */
  insert_session_sessions__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SessionRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["src__models__session__Session"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Session By Id */
  get_session_by_id_sessions__session_id__get: {
    parameters: {
      path: {
        session_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["src__models__session__Session"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Session */
  delete_session_sessions__session_id__delete: {
    parameters: {
      path: {
        session_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["src__models__session__Session"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Session */
  update_session_sessions__session_id__patch: {
    parameters: {
      path: {
        session_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SessionUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["src__models__session__Session"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Run Crew */
  run_crew_sessions_run_post: {
    parameters: {
      query?: {
        mock?: boolean;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RunRequestModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RunResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Messages By Session */
  get_messages_by_session_messages__get: {
    parameters: {
      query: {
        by_session: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Message"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Insert Message */
  insert_message_messages__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["MessageRequestModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Message By Id */
  get_message_by_id_messages__message_id__get: {
    parameters: {
      path: {
        message_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Message */
  delete_message_messages__message_id__delete: {
    parameters: {
      path: {
        message_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Message */
  update_message_messages__message_id__patch: {
    parameters: {
      path: {
        message_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MessageUpdateModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Message"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Crews Of User */
  get_crews_of_user_crews__get: {
    parameters: {
      query: {
        by_profile: string;
        ascending?: boolean;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Crew"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Insert Crew */
  insert_crew_crews__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CrewRequestModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["Crew"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Published Crews */
  get_published_crews_crews_published_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Crew"][];
        };
      };
    };
  };
  /** Get Crew By Id */
  get_crew_by_id_crews__crew_id__get: {
    parameters: {
      path: {
        crew_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Crew"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Crew */
  delete_crew_crews__crew_id__delete: {
    parameters: {
      path: {
        crew_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Crew"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Crew */
  update_crew_crews__crew_id__patch: {
    parameters: {
      path: {
        crew_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CrewUpdateModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Crew"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Published Agents */
  get_published_agents_agents_published_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Agent"][];
        };
      };
    };
  };
  /** Get Users Agents */
  get_users_agents_agents_by_profile_get: {
    parameters: {
      query: {
        profile_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Agent"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Agents From Crew */
  get_agents_from_crew_agents_by_crew_get: {
    parameters: {
      query: {
        crew_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Agent"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Agent By Id */
  get_agent_by_id_agents__agent_id__get: {
    parameters: {
      path: {
        agent_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Agent"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Agent */
  delete_agent_agents__agent_id__delete: {
    parameters: {
      path: {
        agent_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Agent"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Patch Agent */
  patch_agent_agents__agent_id__patch: {
    parameters: {
      path: {
        agent_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AgentUpdateModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Agent"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Insert Agent */
  insert_agent_agents__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AgentRequestModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Agent"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Profiles */
  get_profiles_profiles__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Profile"][];
        };
      };
    };
  };
  /** Insert Profile */
  insert_profile_profiles__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProfileRequestModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["Profile"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Profile By Id */
  get_profile_by_id_profiles__profile_id__get: {
    parameters: {
      path: {
        profile_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Profile"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Profile */
  update_profile_profiles__profile_id__patch: {
    parameters: {
      path: {
        profile_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProfileUpdateModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Profile"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Get Api Keys
   * @description Returns api keys with the api key type as an object with the id, name, description etc.
   */
  get_api_keys_profiles__profile_id__api_keys_get: {
    parameters: {
      path: {
        profile_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["APIKey"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Insert Api Key */
  insert_api_key_profiles_api_keys_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["APIKeyRequestModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["APIKey"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Api Key */
  delete_api_key_profiles_api_keys__api_key_id__delete: {
    parameters: {
      path: {
        api_key_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["APIKey"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Api Key */
  update_api_key_profiles_api_keys__api_key_id__patch: {
    parameters: {
      path: {
        api_key_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["APIKeyUpdateModel"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["APIKey"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Email Sign Up
   * @description format for passing display name: 'options': {'data':{'display_name': 'name'}}
   */
  email_sign_up_auth_sign_up_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignUpWithEmailAndPasswordCredentials"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AuthResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Email Sign In */
  email_sign_in_auth_sign_in_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignInWithEmailAndPasswordCredentials"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AuthResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Provider Sign In */
  provider_sign_in_auth_sign_in_provider_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignInWithOAuthCredentials"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["OAuthResponse"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get All Api Key Types */
  get_all_api_key_types_api_key_types__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["APIKeyType"][];
        };
      };
    };
  };
  /** Get Leads */
  get_leads_rest__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PublishCommentResponse"][];
        };
      };
    };
  };
  /** Publish Comment */
  publish_comment_rest__post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PublishCommentRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Redirect To Docs */
  redirect_to_docs__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** Compile */
  compile_compile_get: {
    parameters: {
      query: {
        id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            [key: string]: string | components["schemas"]["CrewProcessed"];
          };
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Improve */
  improve_improve_get: {
    parameters: {
      query: {
        word_limit: number;
        prompt: string;
        prompt_type: "generic" | "system" | "user";
        temperature: number;
        profile_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Auto Build Crew */
  auto_build_crew_auto_build_get: {
    parameters: {
      query: {
        general_task: string;
        profile_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Profile From Header */
  get_profile_from_header_me_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
}
